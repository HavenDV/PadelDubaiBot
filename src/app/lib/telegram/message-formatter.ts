// Message formatting utilities - converts DB data to Telegram messages
import { Booking, Location, User } from "../../../../database.types";
import { generateCalendarLinks } from "./constants";

// Helper function to format Date objects back to display strings
function formatGameDateTime(
  startTime: Date,
  endTime: Date
): { day: string; date: string; time: string; title: string } {
  // Format using Dubai timezone regardless of server/runtime timezone
  const timeZone = "Asia/Dubai" as const;

  // Weekday in Russian, capitalized (e.g., "–í—Ç–æ—Ä–Ω–∏–∫")
  const weekday = new Intl.DateTimeFormat("ru-RU", {
    weekday: "long",
    timeZone,
  }).format(startTime);
  const day = weekday.charAt(0).toUpperCase() + weekday.slice(1);

  // Date as DD.MM
  const date = new Intl.DateTimeFormat("ru-RU", {
    day: "2-digit",
    month: "2-digit",
    timeZone,
  }).format(startTime);

  // Times as HH:MM-HH:MM in Dubai time (24h)
  const timeFormatter = new Intl.DateTimeFormat("ru-RU", {
    hour: "2-digit",
    minute: "2-digit",
    hour12: false,
    timeZone,
  });
  const startTimeStr = timeFormatter.format(startTime);
  const endTimeStr = timeFormatter.format(endTime);
  const time = `${startTimeStr}-${endTimeStr}`;

  const title = `${day}, ${date}, ${time}`;

  return { day, date, time, title };
}

export class MessageFormatter {
  /**
   * Formats a booking message directly from DB types
   */
  static formatBookingMessage(params: {
    booking: Booking;
    location: Location;
    registrations?: {
      user: Pick<User, "id" | "username" | "first_name" | "skill_level">;
    }[];
  }): string {
    const { booking, location } = params;

    const startTime = new Date(booking.start_time);
    const endTime = new Date(booking.end_time);

    const mapsUrl = location.url || undefined;
    const locationLink = mapsUrl
      ? `<a href="${mapsUrl}">${location.name}</a>`
      : location.name;

    const calendarLink = generateCalendarLinks({
      startTime,
      endTime,
      club: location.name,
    }).google;
    const calendarSection = calendarLink
      ? `üìÖ <a href="${calendarLink}">–î–æ–±–∞–≤–∏—Ç—å –≤ Google Calendar</a>`
      : "üìÖ –î–æ–±–∞–≤–∏—Ç—å –≤ Google Calendar";
    const settingsLink = `<a href="https://t.me/padel_dubai_bot?startapp">Open Settings</a>`;

    // Compose players and waitlist from registrations
    const maxPlayers = booking.courts * 4;
    const players = (params.registrations || []).map((r) => ({
      id: r.user.id,
      userName: r.user.username ? `@${r.user.username}` : r.user.first_name,
      skillLevel: r.user.skill_level || "E",
    }));
    const registeredPlayers = players.slice(0, maxPlayers);
    const waitlist = players.slice(maxPlayers);

    // Generate title from Date objects
    const { title } = formatGameDateTime(startTime, endTime);

    let message = `üéæ <b>${title}</b>

üìç <b>–ú–µ—Å—Ç–æ:</b> ${locationLink}
üíµ <b>–¶–µ–Ω–∞:</b> ${booking.price} aed/—á–µ–ª
üèüÔ∏è <b>–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ –∫–æ—Ä—Ç–æ–≤:</b> ${booking.courts}`;

    const trimmedNote = (booking.note || "").trim();
    if (trimmedNote) {
      message += `\n\n${trimmedNote}`;
    }

    if (booking.cancelled) {
      message += "\n\n‚ùóÔ∏è<b>–û–¢–ú–ï–ù–ê</b>‚ùóÔ∏è";
    }

    const playerSlots = this.formatPlayerSlots(registeredPlayers, maxPlayers);
    const waitlistSection = this.formatWaitlist(waitlist);

    // Avoid extra blank line when there is no note
    const beforeCalendar = trimmedNote ? "\n\n" : "\n";
    message += `${beforeCalendar}${calendarSection}\n‚öôÔ∏è ${settingsLink}

${
  booking.cancelled
    ? "<b>–ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. Waitlist:</b>"
    : "<b>–ó–∞–ø–∏—Å–∞–≤—à–∏–µ—Å—è –∏–≥—Ä–æ–∫–∏:</b>"
}
${playerSlots}

${waitlistSection}`;

    return message;
  }

  /**
   * Formats the player slots section
   */
  private static formatPlayerSlots(
    registeredPlayers: { userName: string; skillLevel: string }[],
    maxPlayers: number
  ): string {
    const slots: string[] = [];
    for (let i = 0; i < maxPlayers; i++) {
      const player = registeredPlayers[i];
      if (player) {
        slots.push(`${i + 1}. ${player.userName} (${player.skillLevel})`);
      } else {
        slots.push(`${i + 1}. -`);
      }
    }
    return slots.join("\n");
  }

  /**
   * Formats the waitlist section
   */
  private static formatWaitlist(
    waitlist: { userName: string; skillLevel: string }[]
  ): string {
    if (waitlist.length === 0) {
      return "‚è≥ <b>Waitlist:</b>\n---";
    }
    const waitlistPlayers = waitlist
      .map(
        (player, index) =>
          `${index + 1}. ${player.userName} (${player.skillLevel})`
      )
      .join("\n");
    return `‚è≥ <b>Waitlist:</b>\n${waitlistPlayers}`;
  }

  /**
   * Formats a welcome message for new group members
   */
  static formatWelcomeMessage(firstName: string): string {
    return `–ü—Ä–∏–≤–µ—Ç ${firstName} üéæ!
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à padel —á–∞—Ç!
–£ –Ω–∞—Å –¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –∏ –º—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –Ω–æ–≤—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º

üèì –ù–µ–º–Ω–æ–≥–æ –æ –Ω–∞—Å:
‚Äî –ò–≥—Ä–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –≤ –ª—É—á—à–∏—Ö –∫–ª—É–±–∞—Ö –î—É–±–∞—è
‚Äî –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞ ‚Äî –ª—ë–≥–∫–∞—è, –±–µ–∑ –Ω–µ–≥–∞—Ç–∏–≤–∞, –∏–≥—Ä–∞–µ–º —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º
‚Äî –û—Ç–Ω–æ—à–µ–Ω–∏–µ –¥—Ä—É–≥ –∫ –¥—Ä—É–≥—É ‚Äî —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–µ
‚Äî –ï—Å—Ç—å —Ä–∞–∑–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –∏–≥—Ä—ã, —á—Ç–æ–±—ã –≤—Å–µ–º –±—ã–ª–æ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ

üéØ –ü–µ—Ä–µ–¥ –ø–µ—Ä–≤–æ–π –∏–≥—Ä–æ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å –Ω–∞—à–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ ‚Äî —Ç–∞–º –æ–ø–∏—Å–∞–Ω—ã —Ñ–æ—Ä–º–∞—Ç, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ –∫–∞–∫ –≤—Å—ë —É—Å—Ç—Ä–æ–µ–Ω–æ:
<a href="https://t.me/PadDXB/602">–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª–∞</a>

ü§ù –ï—Å–ª–∏ —Ç—ã –Ω–µ —É–≤–µ—Ä–µ–Ω, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ —Ç–µ–±–µ —É—Ä–æ–≤–µ–Ω—å ‚Äî –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –º—ã –≤—Å–µ–≥–¥–∞ –ø–æ–¥—Å–∫–∞–∂–µ–º –∏ –ø–æ–º–æ–∂–µ–º.

üí¨ –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç –∏–ª–∏ –≤ –ª–∏—á–∫—É. –ú—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏!

–î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –∫–æ—Ä—Ç–µ! üèÜ`;
  }

  /**
   * Formats the weekly schedule header message
   */
  static formatWeeklyScheduleMessage(weekRange: string): string {
    return `üèì <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ Padel –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é</b> üèì

–î—Ä—É–∑—å—è, –ø—Ä–∏–≤–µ—Ç! ‚ùóÔ∏è

–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–º –∏–≥—Ä—ã –∏ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å! üéæ

üìÖ –ù–µ–¥–µ–ª—è: ${weekRange}`;
  }

  /**
   * Gets current Dubai time as a formatted string
   */
  static getCurrentDubaiTime(): string {
    return new Date().toLocaleString("ru-RU", {
      timeZone: "Asia/Dubai",
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
      hour: "2-digit",
      minute: "2-digit",
      second: "2-digit",
    });
  }

  /**
   * Gets current week date range
   */
  static getCurrentWeekDateRange(): string {
    const now = new Date();
    const currentDay = now.getDay(); // 0 = Sunday, 1 = Monday, etc.

    // Calculate days until next Monday
    const daysUntilNextMonday = currentDay === 1 ? 7 : (8 - currentDay) % 7;

    const nextMonday = new Date(now);
    nextMonday.setDate(now.getDate() + daysUntilNextMonday);

    const sunday = new Date(nextMonday);
    sunday.setDate(nextMonday.getDate() + 6);

    const formatDate = (date: Date) => {
      return date.toLocaleDateString("ru-RU", {
        day: "2-digit",
        month: "2-digit",
        timeZone: "Asia/Dubai",
      });
    };

    return `${formatDate(nextMonday)} - ${formatDate(sunday)}`;
  }
}
