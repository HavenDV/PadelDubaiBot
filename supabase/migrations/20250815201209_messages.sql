
  create table "public"."messages" (
    "id" bigint generated by default as identity not null,
    "booking_id" bigint not null,
    "message_id" bigint not null,
    "chat_id" bigint not null,
    "is_active" boolean default true,
    "created_at" timestamp without time zone default now(),
    "updated_at" timestamp without time zone default now()
      );


alter table "public"."messages" enable row level security;

CREATE INDEX messages_booking_id_idx ON public.messages USING btree (booking_id);

CREATE INDEX messages_chat_message_idx ON public.messages USING btree (chat_id, message_id);

CREATE UNIQUE INDEX messages_pkey ON public.messages USING btree (id);

CREATE UNIQUE INDEX messages_unique_message ON public.messages USING btree (chat_id, message_id);

alter table "public"."messages" add constraint "messages_pkey" PRIMARY KEY using index "messages_pkey";

alter table "public"."messages" add constraint "messages_booking_id_fkey" FOREIGN KEY (booking_id) REFERENCES bookings(id) ON DELETE CASCADE not valid;

alter table "public"."messages" validate constraint "messages_booking_id_fkey";

alter table "public"."messages" add constraint "messages_unique_message" UNIQUE using index "messages_unique_message";

grant select on table "public"."messages" to "anon";

grant delete on table "public"."messages" to "authenticated";

grant select on table "public"."messages" to "authenticated";

grant delete on table "public"."messages" to "service_role";

grant insert on table "public"."messages" to "service_role";

grant references on table "public"."messages" to "service_role";

grant select on table "public"."messages" to "service_role";

grant trigger on table "public"."messages" to "service_role";

grant truncate on table "public"."messages" to "service_role";

grant update on table "public"."messages" to "service_role";


  create policy "Only admins can delete telegram messages"
  on "public"."messages"
  as permissive
  for delete
  to authenticated
using (( SELECT is_admin() AS is_admin));



  create policy "Only admins can insert telegram messages"
  on "public"."messages"
  as permissive
  for insert
  to authenticated
with check (( SELECT is_admin() AS is_admin));



  create policy "Only admins can update telegram messages"
  on "public"."messages"
  as permissive
  for update
  to authenticated
using (( SELECT is_admin() AS is_admin))
with check (( SELECT is_admin() AS is_admin));



  create policy "Telegram messages are viewable by everyone"
  on "public"."messages"
  as permissive
  for select
  to authenticated, anon
using (true);


CREATE TRIGGER set_messages_updated_at BEFORE UPDATE ON public.messages FOR EACH ROW EXECUTE FUNCTION set_updated_at();


