
  create table "public"."locations" (
    "id" bigint generated by default as identity not null,
    "name" text not null,
    "url" text not null,
    "created_at" timestamp without time zone default now(),
    "updated_at" timestamp without time zone default now()
      );


alter table "public"."locations" enable row level security;


  create table "public"."users" (
    "id" bigint not null,
    "first_name" text not null,
    "last_name" text,
    "username" text,
    "photo_url" text,
    "language_code" text,
    "is_premium" boolean,
    "allows_write_to_pm" boolean,
    "is_bot" boolean default false,
    "created_at" timestamp without time zone default now(),
    "updated_at" timestamp without time zone default now(),
    "explicit_name" text,
    "skill_level" text,
    "admin" boolean default false
      );


alter table "public"."users" enable row level security;

CREATE UNIQUE INDEX locations_pkey ON public.locations USING btree (id);

CREATE UNIQUE INDEX users_pkey ON public.users USING btree (id);

alter table "public"."locations" add constraint "locations_pkey" PRIMARY KEY using index "locations_pkey";

alter table "public"."users" add constraint "users_pkey" PRIMARY KEY using index "users_pkey";

alter table "public"."users" add constraint "users_skill_level_check" CHECK ((skill_level = ANY (ARRAY['E'::text, 'D'::text, 'D+'::text, 'C-'::text, 'C'::text, 'C+'::text]))) not valid;

alter table "public"."users" validate constraint "users_skill_level_check";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.set_updated_at()
 RETURNS trigger
 LANGUAGE plpgsql
 SET search_path TO ''
AS $function$
BEGIN
    NEW.updated_at := now();
    RETURN NEW;
END;
$function$
;

grant delete on table "public"."locations" to "service_role";

grant insert on table "public"."locations" to "service_role";

grant references on table "public"."locations" to "service_role";

grant select on table "public"."locations" to "service_role";

grant trigger on table "public"."locations" to "service_role";

grant truncate on table "public"."locations" to "service_role";

grant update on table "public"."locations" to "service_role";

grant delete on table "public"."users" to "service_role";

grant insert on table "public"."users" to "service_role";

grant references on table "public"."users" to "service_role";

grant select on table "public"."users" to "service_role";

grant trigger on table "public"."users" to "service_role";

grant truncate on table "public"."users" to "service_role";

grant update on table "public"."users" to "service_role";


  create policy "Public locations are viewable by everyone"
  on "public"."locations"
  as permissive
  for select
  to authenticated, anon
using (true);



  create policy "Public users are viewable by everyone"
  on "public"."users"
  as permissive
  for select
  to authenticated, anon
using (true);



  create policy "Users can update own record"
  on "public"."users"
  as permissive
  for update
  to authenticated
using (((auth.uid())::text = (id)::text))
with check (((auth.uid())::text = (id)::text));


CREATE TRIGGER set_locations_updated_at BEFORE UPDATE ON public.locations FOR EACH ROW EXECUTE FUNCTION set_updated_at();

CREATE TRIGGER set_users_updated_at BEFORE UPDATE ON public.users FOR EACH ROW EXECUTE FUNCTION set_updated_at();


