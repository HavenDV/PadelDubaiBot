-- Registrations table (player registrations per booking)
-- Depends on: public.bookings, public.users, public.set_updated_at()

CREATE TABLE IF NOT EXISTS public.registrations (
    id bigint GENERATED BY DEFAULT AS IDENTITY,

    booking_id bigint NOT NULL REFERENCES public.bookings(id) ON DELETE CASCADE,
    user_id bigint NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,

    -- Timestamps
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),

    CONSTRAINT registrations_pkey PRIMARY KEY (id),
    CONSTRAINT registrations_unique UNIQUE (booking_id, user_id)
);

COMMENT ON TABLE public.registrations IS 'Player registrations for a booking, including waitlist.';

-- Enable Row Level Security
ALTER TABLE public.registrations ENABLE ROW LEVEL SECURITY;

-- Restrict broad access
REVOKE ALL ON TABLE public.registrations FROM PUBLIC, anon, authenticated;

-- Backend full access
GRANT ALL ON TABLE public.registrations TO service_role;

-- Allow public/client read access to non-sensitive columns
GRANT SELECT (
  id, booking_id, user_id, created_at, updated_at
) ON public.registrations TO anon, authenticated;
GRANT SELECT ON TABLE public.registrations TO anon, authenticated;

-- Allow authenticated clients to write (RLS restricts to own rows)
GRANT INSERT (booking_id, user_id) ON public.registrations TO authenticated;
GRANT UPDATE ON public.registrations TO authenticated;
GRANT DELETE ON public.registrations TO authenticated;

-- Policies
CREATE POLICY "Registrations are viewable by everyone"
ON public.registrations FOR SELECT
TO authenticated, anon
USING (true);

-- Users can manage their own registration rows using Telegram ID from JWT app_metadata
CREATE POLICY "Users manage own registrations"
ON public.registrations FOR INSERT TO authenticated
WITH CHECK ((select public.is_current_user(user_id)));

CREATE POLICY "Users update own registrations"
ON public.registrations FOR UPDATE TO authenticated
USING ((select public.is_current_user(user_id)))
WITH CHECK ((select public.is_current_user(user_id)));

CREATE POLICY "Users delete own registrations"
ON public.registrations FOR DELETE TO authenticated
USING ((select public.is_current_user(user_id)));

-- Admins can manage registrations for moderation purposes
CREATE POLICY "Admins manage registrations (insert)"
ON public.registrations FOR INSERT TO authenticated
WITH CHECK ((select public.is_admin()));

CREATE POLICY "Admins manage registrations (update)"
ON public.registrations FOR UPDATE TO authenticated
USING ((select public.is_admin()))
WITH CHECK ((select public.is_admin()));

CREATE POLICY "Admins manage registrations (delete)"
ON public.registrations FOR DELETE TO authenticated
USING ((select public.is_admin()));

-- Trigger to keep updated_at current on row modification
CREATE TRIGGER set_registrations_updated_at
BEFORE UPDATE ON public.registrations
FOR EACH ROW
EXECUTE FUNCTION public.set_updated_at();

