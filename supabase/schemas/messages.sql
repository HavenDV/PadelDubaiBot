-- Telegram messages table to track posted booking messages
-- Depends on: public.bookings, public.set_updated_at()

CREATE TABLE IF NOT EXISTS public.messages (
    id bigint GENERATED BY DEFAULT AS IDENTITY,

    -- Core info
    booking_id bigint NOT NULL REFERENCES public.bookings(id) ON DELETE CASCADE,
    message_id bigint NOT NULL,
    chat_id bigint NOT NULL,

    -- Timestamps
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),

    CONSTRAINT messages_pkey PRIMARY KEY (id),
    CONSTRAINT messages_unique_message UNIQUE (chat_id, message_id)
);

COMMENT ON TABLE public.messages IS 'Telegram messages posted for bookings. Message presence indicates active status - deleted messages are removed from table.';

-- Enable Row Level Security
ALTER TABLE public.messages ENABLE ROW LEVEL SECURITY;

-- Restrict broad access
REVOKE ALL ON TABLE public.messages FROM PUBLIC, anon, authenticated;

-- Backend full access
GRANT ALL ON TABLE public.messages TO service_role;

-- Allow public/client read access to safe columns
GRANT SELECT (
  id, booking_id, message_id, chat_id, created_at, updated_at
) ON public.messages TO anon, authenticated;
GRANT SELECT ON TABLE public.messages TO anon, authenticated;

-- Admin-only write access (controlled by RLS)
GRANT INSERT (
  booking_id, message_id, chat_id
) ON public.messages TO authenticated;
GRANT DELETE ON public.messages TO authenticated;

-- Policies
CREATE POLICY "Telegram messages are viewable by everyone"
ON public.messages FOR SELECT
TO authenticated, anon
USING (true);

-- Admin-only write policies
CREATE POLICY "Only admins can insert telegram messages"
ON public.messages FOR INSERT
TO authenticated
WITH CHECK ((select public.is_admin()));

CREATE POLICY "Only admins can update telegram messages"
ON public.messages FOR UPDATE
TO authenticated
USING ((select public.is_admin()))
WITH CHECK ((select public.is_admin()));

CREATE POLICY "Only admins can delete telegram messages"
ON public.messages FOR DELETE
TO authenticated
USING ((select public.is_admin()));

-- Trigger to keep updated_at current on row modification
CREATE TRIGGER set_messages_updated_at
BEFORE UPDATE ON public.messages
FOR EACH ROW
EXECUTE FUNCTION public.set_updated_at();

-- Index for performance
CREATE INDEX messages_booking_id_idx ON public.messages(booking_id);
CREATE INDEX messages_chat_message_idx ON public.messages(chat_id, message_id);