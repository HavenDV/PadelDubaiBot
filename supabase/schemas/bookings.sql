-- Bookings table (games) based on GameInfo + GameState
-- Depends on: public.locations, public.set_updated_at()

CREATE TABLE IF NOT EXISTS public.bookings (
    id bigint GENERATED BY DEFAULT AS IDENTITY,

    -- Core info
    title text NOT NULL,
    start_time timestamptz NOT NULL,
    end_time timestamptz NOT NULL,
    location_id bigint NOT NULL REFERENCES public.locations(id) ON DELETE RESTRICT,
    price text NOT NULL,
    courts integer NOT NULL CHECK (courts >= 1),
    max_players integer NOT NULL CHECK (max_players >= 0),
    note text,

    -- Telegram message linkage (for deduplication/updates)
    chat_id bigint NOT NULL,
    message_id bigint NOT NULL,

    -- Game state
    cancelled boolean DEFAULT false,

    -- Timestamps
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),

    CONSTRAINT bookings_pkey PRIMARY KEY (id),
    CONSTRAINT bookings_chat_message_unique UNIQUE (chat_id, message_id)
);

COMMENT ON TABLE public.bookings IS 'Game bookings (events) with schedule, location, and state. Based on GameInfo + GameState.';

-- Enable Row Level Security
ALTER TABLE public.bookings ENABLE ROW LEVEL SECURITY;

-- Restrict broad access
REVOKE ALL ON TABLE public.bookings FROM PUBLIC, anon, authenticated;

-- Backend full access
GRANT ALL ON TABLE public.bookings TO service_role;

-- Allow public/client read-only access to safe columns
GRANT SELECT (
  id, title, start_time, end_time, location_id, price, courts, max_players, note, cancelled, created_at, updated_at, chat_id, message_id
) ON public.bookings TO anon, authenticated;
GRANT SELECT ON TABLE public.bookings TO anon, authenticated;
GRANT INSERT (
  title, start_time, end_time, location_id, price, courts, max_players, note, cancelled, chat_id, message_id
) ON public.bookings TO authenticated;
GRANT UPDATE (
  title, start_time, end_time, location_id, price, courts, max_players, note, cancelled, chat_id, message_id
) ON public.bookings TO authenticated;
GRANT DELETE ON public.bookings TO authenticated;

-- Policies
CREATE POLICY "Public bookings are viewable by everyone"
ON public.bookings FOR SELECT
TO authenticated, anon
USING (true);

-- Admin-only write policies
CREATE POLICY "Only admins can insert bookings"
ON public.bookings FOR INSERT
TO authenticated
WITH CHECK ((select public.is_admin()));

CREATE POLICY "Only admins can update bookings"
ON public.bookings FOR UPDATE
TO authenticated
USING ((select public.is_admin()))
WITH CHECK ((select public.is_admin()));

CREATE POLICY "Only admins can delete bookings"
ON public.bookings FOR DELETE
TO authenticated
USING ((select public.is_admin()));

-- Trigger to keep updated_at current on row modification
CREATE TRIGGER set_bookings_updated_at
BEFORE UPDATE ON public.bookings
FOR EACH ROW
EXECUTE FUNCTION public.set_updated_at();


